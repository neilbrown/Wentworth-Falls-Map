#!bin/nash

osm=$1

{
sed '/^<.osm>$/d' $osm
gawk '
	function abbrev_way(name)
	{
		sub(/Avenue$/,"Ave", name)
		sub(/Circle$/,"Cir", name)
		sub(/Close$/, "Cl", name)
		sub(/Crescent$/, "Cr", name)
		sub(/Drive$/, "Dr", name)
		sub(/Grove$/, "Gr", name)
		sub(/Highway$/, "Hwy", name)
		sub(/Lane$/, "Ln", name)
		sub(/Parade$/, "Pde", name)
		sub(/Place$/, "Pl", name)
		sub(/Road$/, "Rd", name)
		sub(/Street$/, "St", name)
		sub(/Circuit$/, "Cct", name)
		sub(/Arcade$/, "Arc", name)
		sub(/Track$/, "Trk", name)
		sub(/Plaza$/, "Plz", name)
		return name
	}

	function abs(a)
	{
		if (a < 0) return -a
		return a
	}

	function reverse(w, new,      i, l)
	{
		split("", new)
		l = length(w)
		for (i = 0; i < l ; i++)
			new[l-i-1] = w[i]
	}

	function canjoin(w1, w2, approx)
	{
		if (w1[length(w1)-1] == w2[0])
			return 1
		if (!approx)
			return 0

		r1a = w1[0]
		r1 = w1[length(w1)-1]
		r2 = w2[0]
		r2a = w2[length(w2)-1]
		if (dist(r1, r2) > 1)
			return 0
		# order must be roughly r1a r1 r2 r2a in some direction.
		if (((lat[r1a] <= lat[r1] && lat[r2] <= lat[r2a]) ||
		     (lat[r1a] >= lat[r1] && lat[r2] >= lat[r2a])) &&
		    ((lon[r1a] <= lon[r1] && lon[r2] <= lon[r2a]) ||
		     (lon[r1a] >= lon[r1] && lon[r2] >= lon[r2a])))
			return 1
		return 0
	}
	function dojoin_after(w1, w2,    i, l)
	{
		l = length(w1)
		if (w1[l-1] == w2[0])
			l -= 1
		for (i = 0; i < length(w2); i++)
			w1[l+i] = w2[i]
	}

	function dojoin_before(w1, w2,    i, l, l2)
	{
		# insert w1 before w2 - shifting w2 up
		l = length(w1)
		if (w1[l-1] == w2[0])
			l -= 1
		l2 = length(w2)
		for (i = l2; i > 0 ; i--)
			w2[l+i-1] = w2[i-1]
		for (i = 0; i < l; i++)
			w2[i] = w1[i]
	}

	function join2ways(ways, w1, w2, w1f, w2f, approx,    w1r, w2r)
	{
		if (w1 == w2)
			return 0
		reverse(w1f, w1r)
		reverse(w2f, w2r)

		if (canjoin(w1f,w2f, approx))
			dojoin_after(w1f,w2f)
		else if (canjoin(w1f,w2r, approx))
			dojoin_after(w1f, w2r)
		else if (canjoin(w1r,w2f, approx))
			dojoin_before(w2r, w1f)
		else if (canjoin(w1r, w2r, approx))
			dojoin_before(w2f, w1f)
		else
			return 0
		delete idrefs[w2]
		delete ways[w2]
		return 1
	}
	function join_ways(ways, approx)
	{
		retry = 1
		while (length(ways) > 1 && retry) {
			retry = 0
			for (id in ways) {
				for (id2 in ways) {
					if (join2ways(ways, id, id2, idrefs[id], idrefs[id2], approx)) {
						retry = 1
						break
					}
				}
				if (retry) break
			}
		}
	}

	function dist_lat(p0, p1)
	{
		return projection * 1000 * attenuation * (lat[p1] - lat[p0])
	}

	function dist_lon(p0, p1)
	{
		return 1000 * attenuation * (lon[p1] - lon[p0])
	}

	function dist(p0, p1,    lt, ln)
	{
		lt = dist_lat(p0, p1)
		ln = dist_lon(p0, p1)
		return sqrt(lt*lt + ln*ln)
	}

	function calc_way_len(id,    len, i, p0, p1, lt, ln)
	{
		len = 0
		p0 = idrefs[id][0]
		for (i = 1; i < length(idrefs[id]); i++) {	
			p1 = idrefs[id][i]
			len += dist(p0, p1)
			p0 = p1
		}
		return len
	}

	function shares_point(p1, p2,    i, j)
	{
		for (i = 0; i < length(p1); i++)
			for (j = 0 ; j < length(p2); j++)
				if (p1[i] == p2[j])
					return 1
		return 0
	}

	function ref_used_other(ref, pathid)
	{
		for (id2 in idrefs) {
			if (id2 == pathid)
				continue
			for (i in idrefs[id2])
				if (idrefs[id2][i] == ref)
					return 1
		}
		return 0
	}

	function get_vect(pathid, v,     p1, p2)
	{
		p1 = idrefs[pathid][0]
		p2 = idrefs[pathid][length(idrefs[pathid])-1]
		v[0] = lat[p1]
		v[1] = lon[p1]
		v[2] = lat[p2]
		v[3] = lon[p2]
	}

	function extend_start(pathid, v, factor,   lt,ln,p1)
	{
		lt = v[0] + (v[0] - v[2]) * factor
		ln = v[1] + (v[1] - v[3]) * factor
		p1 = "x" idrefs[pathid][0]
		lat[p1] = lt
		lon[p1] = ln
		printf "<node id=\"%s\" lat=\"%.7f\" lon=\"%.7f\"/>\n", p1, lt, ln
		print "start",  idrefs[pathid][0] > "/dev/stderr"
		idrefs[pathid][0] = p1
	}

	function extend_end(pathid, v, factor,    lt,ln, p1)
	{
		lt = v[2] + (v[2] - v[0]) * factor
		ln = v[3] + (v[3] - v[1]) * factor
		p1 = "x" idrefs[pathid][length(idrefs[pathid])-1]
		lat[p1] = lt
		lon[p1] = ln
		printf "<node id=\"%s\" lat=\"%.7f\" lon=\"%.7f\"/>\n", p1, lt, ln
		print "end", idrefs[pathid][length(idrefs[pathid])-1] > "/dev/stderr"
		idrefs[pathid][length(idrefs[pathid])-1] = p1
	}

	function do_trim(path, p,    i, l, j)
	{
		l = length(path)
		for (i = 0; i < l; i++) {
			if (path[i] == p) {
				if (dist(path[0], p) > dist(path[l-1], p)) {
					# remove end
					for (i += 1; i < l ; i ++)
						delete path[i]
				} else {
					# remove start
					for (j = 0; j < l ; j++)
						if (j < l - i)
							path[j] = path[j+i]
						else
							delete path[j]
				}
				break;
			}
		}
	}

	BEGIN {
		prio["trunk"] = 1
		prio["secondary"] = 3
		prio["tertiary"] = 4
		prio["residential"] = 5
		prio["service"] = 6
		prio["track"] = 7
		prio["unclassified"] = 8
		# These are hidden
		prio["proposed"] = 99
		prio["trunk_link"] = 99
		prio["secondary_link"] = 99

		attenuation = 7
		# projection is 1/cos(latitude)
		projection = 1 / cos(-33.7 * 3.1415926 / 180.0)

		while (getline < "mods") {
			split($0, m, /:/)
			mods[m[1]] = mods[m[1]] ":" m[2]
			mods2[m[1],m[2]] = m[3]
		}
		close ("mods")
		
	}

	$1 == "<bounds" {
		split($0, ll, /"/);
		minlat = ll[2]
		minlon = ll[4]
		maxlat = ll[6]
		maxlon = ll[8]
	}
	$1 == "<node" && $3 ~ /lat=/ {
		split($0, ll, /"/);
		lon[ll[2]] = ll[6];
		lat[ll[2]] = ll[4];
	}
	$1 == "<way" {inway = 1; delete refs; hwy="";
		split($2, ids, /"/); id=ids[2];
		}
	$1 == "</way>" {
		n = name
		h = hwy
		fr = firstref
		lr = lastref

		inway = 0;
		name = "";
		hwy = "";
		firstref = ""

		if (!n || ! h || !fr)
			#nothing here...
			next;
		if (prio[h] == 99)
			next;
		if (mods2[n,id] == "discard")
			next;

		for (i in refs)
			idrefs[id][i] = refs[i];

		ways[n][id] = 1;


		if (h in prio && n in hwyof && prio[h] > prio[hwyof[n]]) h = hwyof[n];
		if (prio[h] > 5) h = "residential"
		hwyof[n] = h
	}
			
	inway { split($0, wd, /"/) }
	inway && wd[2] == "name" { name = wd[4] }
	inway && wd[2] == "highway" { hwy = wd[4] }
	inway && wd[2] == "waterway" { hwy = "WATER" wd[4] }

	inway && wd[1] ~ "<nd ref=" {
		if (lon[wd[2]] < minlon || lon[wd[2]] > maxlon ||
		    lat[wd[2]] < minlat || lat[wd[2]] > maxlat)
			next;
		refs[length(refs)] = wd[2]; lastref=wd[2]; if (!firstref) firstref=wd[2]; 
	}

	END {
		for (n in ways) {
			# attempt to join adjoining ways
			join_ways(ways[n], 0)
			# now try adjacent ways
			join_ways(ways[n], 1)

			for (id in ways[n]) {
				split(mods[n], tags, /:/)
				for (t in tags)
					if (t > 1 && mods2[n,tags[t]] == "trim")
						do_trim(idrefs[id], tags[t])
				wlen = calc_way_len(id)
				alias = n
				if (wlen < length(alias))
					alias = abbrev_way(alias)
				if (wlen <= 0.70 * length(alias)) {
					# This name will not fit.  First see if there is a longer
					# path that shares a point.  If so, do not bother
					found = 0
					for (id2 in ways[n]) {
						if (id == id2)
							continue
						if (calc_way_len(id2) < wlen)
							continue
						if (shares_point(idrefs[id], idrefs[id2])) {
							found = 1
							break
						}
					}
					if (found)
						continue
				}
				if (wlen <= 0.70 * length(alias)) {
					# Try to enlarge
					get_vect(id, vv)
					extend = 0
					if (!ref_used_other(idrefs[id][0], id))
						extend += 1
					if (!ref_used_other(idrefs[id][length(idrefs[id])-1], id))
						extend += 2

					if (extend) {
						target = length(alias) * 0.71 / wlen
						if (extend == 1)
							extend_start(id, vv, target)
						if (extend == 2)
							extend_end(id, vv, target)
						if (extend == 3) {
							extend_start(id, vv, (1+target)/2)
							extend_end(id, vv, (1+target)/2)
						}
						print "extended", alias, wlen > "/dev/stderr"
						wlen = wlen * target
						print "  to", wlen > "/dev/stderr"
					}
				}
				if (wlen <= 0.70 * length(alias)) {
					split(alias, awords)
					if (wlen > 4 && length(awords) > 1) {
						# Try to abbreviate.
						t = awords[length(awords)]
						l = length(alias) - length(t) + 1
						awords[length(awords)] = substr(t, 1, 1)
						mn = (l - (wlen/0.75)) / (length(awords)-1)
						mr = (l - (wlen/0.75)) - (mn * (length(awords)-1))
						# need to remove mn from all and 1 more from mr
						na = ""
						for (i = 1; i <= length(awords)-1; i++) {
							awords[i] = substr(awords[i], 1, length(awords[i])-mn)
							if (i <= mr)
								awords[i] = substr(awords[i], 1, length(awords[i])-1)
							na = na  awords[i] " "
						}
						na = na awords[length(awords)]
						alias = na
						printf "Shortened %s to %s\n", n, alias > "/dev/stderr"
					}
					printf "Len %s %s is %f\n", alias, id, calc_way_len(id) > "/dev/stderr"
				}
				printf "<way id=\"A%s\">\n", id;
				for (i in idrefs[id]) {
					printf "  <nd ref=\"%s\"/>\n", idrefs[id][i]
				}
				pos = "50"
				if (mods2[n, "start"] ~ /^[0-9]+$/)
					pos = mods2[n, "start"]
				if (mods2[n, id] ~ /^[0-9]+$/)
					pos = mods2[n, id]

				printf "   <tag k=\"svg:startOffset\" v=\"%d%%\"/>\n", pos
				if (substr(hwyof[n], 1, 5) == "WATER")
					printf "  <tag k=\"waterway\" v=\"%s_name\"/>\n", substr(hwyof[n], 6);
				else
					printf "  <tag k=\"highway\" v=\"%s_name\"/>\n", hwyof[n];

				printf "  <tag k=\"name\" v=\"%s\"/>\n", alias
				if (n in mods) {
					split(mods[n], tags, /:/)
					for (t in tags)
						if (t > 1 && length(mods2[n,tags[t]]))
							printf "  <tag k=\"%s\" v=\"%s\"/>\n", tags[t], mods2[n,tags[t]]
				}
				printf "</way>\n"
			}
		}
	}
' $osm
echo "</osm>"
}
