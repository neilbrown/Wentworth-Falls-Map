#!bin/nash

osm=$1

{
sed '/^<.osm>$/d' $osm
gawk '
	function abbrev_way(name)
	{
		sub(/Avenue$/,"Ave", name)
		sub(/Circle$/,"Cir", name)
		sub(/Close$/, "Cl", name)
		sub(/Crescent$/, "Cr", name)
		sub(/Drive$/, "Dr", name)
		sub(/Grove$/, "Gr", name)
		sub(/Highway$/, "Hwy", name)
		sub(/Lane$/, "Ln", name)
		sub(/Parade$/, "Pde", name)
		sub(/Place$/, "Pl", name)
		sub(/Road$/, "Rd", name)
		sub(/Street$/, "St", name)
		return name
	}

	function abs(a)
	{
		if (a < 0) return -a
		return a
	}
	function sameref(r1, r2, r1a, r2a)
	{
		# r1 and r2 must be the same
		# or they must be close and roughly between
		# r1a and r2a
		if (r1 == r2)
			return 1
		if (abs(lon[r1]-lon[r2]) > 0.0006 ||
		    abs(lat[r1]-lat[r2]) > 0.0006)
			return 0
		# order must be roughly r1a r1 r2 r2a in some direction.
		if (((lat[r1a] <= lat[r1] && lat[r2] <= lat[r2a]) ||
		     (lat[r1a] >= lat[r1] && lat[r2] >= lat[r2a])) &&
		    ((lon[r1a] <= lon[r1] && lon[r2] <= lon[r2a]) ||
		     (lon[r1a] >= lon[r1] && lon[r2] >= lon[r2a])))
			return 1
		return 0
	}
	BEGIN {
		prio["trunk"] = 1
		prio["secondary"] = 3
		prio["tertiary"] = 4
		prio["residential"] = 5
		prio["service"] = 6
		prio["track"] = 7
		prio["unclassified"] = 8
		# These are hidden
		prio["proposed"] = 99
		prio["trunk_link"] = 99
		prio["secondary_link"] = 99
	}

	$1 == "<node" && $3 ~ /lat=/ {
		split($0, ll, /"/);
		lon[ll[2]] = ll[6];
		lat[ll[2]] = ll[4];
	}
	$1 == "<way" {inway = 1; delete(refs); hwy="";
		split($2, ids, /"/); id=ids[2];
		}
	$1 == "</way>" {
		n = name
		h = hwy
		fr = firstref
		lr = lastref

		inway = 0;
		name = "";
		hwy = "";
		firstref = ""

		if (!n || ! h || !fr)
			#nothing here...
			next;
		if (prio[h] == 99)
			next;

		if (! (n in alias))
			alias[n] = abbrev_way(n)

		# See if we can add an existing way
		for (id2 in ways[n]) {
			delete r
			for (i in idrefs[id2])
				r[i] = idrefs[id2][i]
			if (sameref(fr,r[0], lr, r[length(r)-1])) {
				delete(rn);
				for (i = length(refs); i > 0; i--) {
					rn[length(rn)] = refs[i-1];
				}
				for (i = 1 ; i < length(r); i++) {
					rn[length(rn)] = r[i];
				}
				delete refs
				for (i in rn) refs[i] = rn[i]
				delete idrefs[id2];
				delete ways[n][id2]
				fr = refs[0]
				lr = refs[length(refs)-1]
			} else if (sameref(fr, r[length(r)-1], lr, r[0])) {
				for (i = 1 ; i < length(refs); i++) {
					r[length(r)] = refs[i];
				}
				delete refs
				for (i in r) refs[i] = r[i]
				delete idrefs[id2]
				delete ways[n][id2]
				fr = refs[0]
				lr = refs[length(refs)-1]
			} else if (sameref(lr, r[0], fr, r[length(r)-1])) {
				for (i = 1 ; i < length(r); i++) {
					refs[length(refs)] = r[i];
				}
				delete idrefs[id2]
				delete ways[n][id2]
				fr = refs[0]
				lr = refs[length(refs)-1]
			} else if (sameref(lr, r[length(r)-1], fr, r[0])) {
				for (i = length(r)-1 ; i > 0; i--) {
					refs[length(refs)] = r[i-1];
				}
				delete idrefs[id2]
				delete ways[n][id2]
				fr = refs[0]
				lastref = refs[length(refs)-1]
			}
		}

		# refs has been extended if possible
		for (i in refs)
			idrefs[id][i] = refs[i];

		ways[n][id] = 1;


		if (h in prio && n in hwyof && prio[h] > prio[hwyof[n]]) h = hwyof[n];
		if (prio[h] > 5) h = "residential"
		hwyof[n] = h
	}
			
	inway { split($0, wd, /"/) }
	inway && wd[2] == "name" { name = wd[4] }
	inway && wd[2] == "highway" { hwy = wd[4] }

	inway && wd[1] ~ "<nd ref=" { refs[length(refs)] = wd[2]; lastref=wd[2]; if (!firstref) firstref=wd[2]; }

	END {
		for (n in ways) {
			for (id in ways[n]) {
				printf "<way id=\"A%s\">\n", id;
				for (i in idrefs[id]) {
					printf "  <nd ref=\"%s\"/>\n", idrefs[id][i]
				}
				printf "  <tag k=\"highway\" v=\"%s_name\"/>\n", hwyof[n];

				printf "  <tag k=\"name\" v=\"%s\"/>\n", alias[n]
				printf "</way>\n"
			}
		}
	}
' $osm
echo "</osm>"
}
